{
  "dependencies": [
    "@udecode/plate-code-block",
    "lowlight"
  ],
  "doc": {
    "description": "A code block with syntax highlighting and language selection.",
    "docs": [
      {
        "route": "/docs/basic-elements"
      },
      {
        "route": "https://pro.platejs.org/docs/components/code-block-element"
      }
    ],
    "examples": [
      "basic-elements-demo"
    ]
  },
  "files": [
    {
      "path": "plate-ui/code-block-element.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { NodeApi } from '@udecode/plate';\nimport { formatCodeBlock, isLangSupported } from '@udecode/plate-code-block';\nimport { PlateElement } from '@udecode/plate/react';\nimport { BracesIcon, CheckIcon, CopyIcon } from 'lucide-react';\n\nimport { Button } from './button';\nimport { CodeBlockCombobox } from './code-block-combobox';\n\nexport const CodeBlockElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const { editor, element } = props;\n\n    return (\n      <PlateElement\n        ref={ref}\n        className={cn(\n          className,\n          'py-1',\n          '**:[.hljs-comment,.hljs-code,.hljs-formula]:text-[#6a737d]',\n          '**:[.hljs-keyword,.hljs-doctag,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_]:text-[#d73a49]',\n          '**:[.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_]:text-[#6f42c1]',\n          '**:[.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable]:text-[#005cc5]',\n          '**:[.hljs-regexp,.hljs-string,.hljs-meta_.hljs-string]:text-[#032f62]',\n          '**:[.hljs-built_in,.hljs-symbol]:text-[#e36209]',\n          '**:[.hljs-name,.hljs-quote,.hljs-selector-tag,.hljs-selector-pseudo]:text-[#22863a]',\n          '**:[.hljs-emphasis]:italic',\n          '**:[.hljs-strong]:font-bold',\n          '**:[.hljs-section]:font-bold **:[.hljs-section]:text-[#005cc5]',\n          '**:[.hljs-bullet]:text-[#735c0f]',\n          '**:[.hljs-addition]:bg-[#f0fff4] **:[.hljs-addition]:text-[#22863a]',\n          '**:[.hljs-deletion]:bg-[#ffeef0] **:[.hljs-deletion]:text-[#b31d28]'\n        )}\n        {...props}\n      >\n        <div className=\"relative rounded-md bg-muted/50\">\n          <pre className=\"overflow-x-auto p-8 pr-4 font-mono text-sm leading-[normal] [tab-size:2] print:break-inside-avoid\">\n            <code>{children}</code>\n          </pre>\n\n          <div className=\"absolute top-1 right-1 z-10 flex gap-0.5 select-none\">\n            {isLangSupported(element.lang as string) && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                className=\"size-6 text-xs\"\n                onClick={() => formatCodeBlock(editor, { element })}\n                title=\"Format code\"\n              >\n                <BracesIcon className=\"!size-3.5 text-muted-foreground\" />\n              </Button>\n            )}\n\n            <CodeBlockCombobox />\n\n            <CopyButton\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"size-6 gap-1 text-xs text-muted-foreground\"\n              value={() => NodeApi.string(element)}\n            />\n          </div>\n        </div>\n      </PlateElement>\n    );\n  }\n);\n\nfunction CopyButton({\n  showLabel = false,\n  value,\n  ...props\n}: { value: (() => string) | string; showLabel?: boolean } & Omit<\n  React.ComponentProps<typeof Button>,\n  'value'\n>) {\n  const [hasCopied, setHasCopied] = React.useState(false);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false);\n    }, 2000);\n  }, [hasCopied]);\n\n  return (\n    <Button\n      onClick={() => {\n        void navigator.clipboard.writeText(\n          typeof value === 'function' ? value() : value\n        );\n        setHasCopied(true);\n      }}\n      {...props}\n    >\n      <span className=\"sr-only\">Copy</span>\n      {hasCopied ? (\n        <CheckIcon className=\"!size-3\" />\n      ) : (\n        <CopyIcon className=\"!size-3\" />\n      )}\n    </Button>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/code-block-element.tsx"
    },
    {
      "path": "plate-ui/code-block-element-static.tsx",
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\nimport type { TCodeBlockElement } from '@udecode/plate-code-block';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate';\n\nexport const CodeBlockElementStatic = ({\n  children,\n  className,\n  ...props\n}: SlateElementProps<TCodeBlockElement>) => {\n  return (\n    <SlateElement\n      className={cn(\n        className,\n        'py-1',\n        '**:[.hljs-comment,.hljs-code,.hljs-formula]:text-[#6a737d]',\n        '**:[.hljs-keyword,.hljs-doctag,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_]:text-[#d73a49]',\n        '**:[.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_]:text-[#6f42c1]',\n        '**:[.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable]:text-[#005cc5]',\n        '**:[.hljs-regexp,.hljs-string,.hljs-meta_.hljs-string]:text-[#032f62]',\n        '**:[.hljs-built_in,.hljs-symbol]:text-[#e36209]',\n        '**:[.hljs-name,.hljs-quote,.hljs-selector-tag,.hljs-selector-pseudo]:text-[#22863a]',\n        '**:[.hljs-emphasis]:italic',\n        '**:[.hljs-strong]:font-bold',\n        '**:[.hljs-section]:font-bold **:[.hljs-section]:text-[#005cc5]',\n        '**:[.hljs-bullet]:text-[#735c0f]',\n        '**:[.hljs-addition]:bg-[#f0fff4] **:[.hljs-addition]:text-[#22863a]',\n        '**:[.hljs-deletion]:bg-[#ffeef0] **:[.hljs-deletion]:text-[#b31d28]'\n      )}\n      {...props}\n    >\n      <div className=\"relative rounded-md bg-muted/50\">\n        <pre className=\"overflow-x-auto p-8 pr-4 font-mono text-sm leading-[normal] [tab-size:2] print:break-inside-avoid\">\n          <code>{children}</code>\n        </pre>\n      </div>\n    </SlateElement>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/plate-ui/code-block-element-static.tsx"
    },
    {
      "path": "plate-ui/code-block-combobox.tsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\n\nimport type { TCodeBlockElement } from '@udecode/plate-code-block';\n\nimport { cn } from '@udecode/cn';\nimport { useEditorRef, useElement, useReadOnly } from '@udecode/plate/react';\nimport { Check } from 'lucide-react';\n\nimport { Button } from './button';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from './command';\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\n\nconst languages: { label: string; value: string }[] = [\n  { label: 'Auto', value: 'auto' },\n  { label: 'Plain Text', value: 'plaintext' },\n  { label: 'ABAP', value: 'abap' },\n  { label: 'Agda', value: 'agda' },\n  { label: 'Arduino', value: 'arduino' },\n  { label: 'ASCII Art', value: 'ascii' },\n  { label: 'Assembly', value: 'x86asm' },\n  { label: 'Bash', value: 'bash' },\n  { label: 'BASIC', value: 'basic' },\n  { label: 'BNF', value: 'bnf' },\n  { label: 'C', value: 'c' },\n  { label: 'C#', value: 'csharp' },\n  { label: 'C++', value: 'cpp' },\n  { label: 'Clojure', value: 'clojure' },\n  { label: 'CoffeeScript', value: 'coffeescript' },\n  { label: 'Coq', value: 'coq' },\n  { label: 'CSS', value: 'css' },\n  { label: 'Dart', value: 'dart' },\n  { label: 'Dhall', value: 'dhall' },\n  { label: 'Diff', value: 'diff' },\n  { label: 'Docker', value: 'dockerfile' },\n  { label: 'EBNF', value: 'ebnf' },\n  { label: 'Elixir', value: 'elixir' },\n  { label: 'Elm', value: 'elm' },\n  { label: 'Erlang', value: 'erlang' },\n  { label: 'F#', value: 'fsharp' },\n  { label: 'Flow', value: 'flow' },\n  { label: 'Fortran', value: 'fortran' },\n  { label: 'Gherkin', value: 'gherkin' },\n  { label: 'GLSL', value: 'glsl' },\n  { label: 'Go', value: 'go' },\n  { label: 'GraphQL', value: 'graphql' },\n  { label: 'Groovy', value: 'groovy' },\n  { label: 'Haskell', value: 'haskell' },\n  { label: 'HCL', value: 'hcl' },\n  { label: 'HTML', value: 'html' },\n  { label: 'Idris', value: 'idris' },\n  { label: 'Java', value: 'java' },\n  { label: 'JavaScript', value: 'javascript' },\n  { label: 'JSON', value: 'json' },\n  { label: 'Julia', value: 'julia' },\n  { label: 'Kotlin', value: 'kotlin' },\n  { label: 'LaTeX', value: 'latex' },\n  { label: 'Less', value: 'less' },\n  { label: 'Lisp', value: 'lisp' },\n  { label: 'LiveScript', value: 'livescript' },\n  { label: 'LLVM IR', value: 'llvm' },\n  { label: 'Lua', value: 'lua' },\n  { label: 'Makefile', value: 'makefile' },\n  { label: 'Markdown', value: 'markdown' },\n  { label: 'Markup', value: 'markup' },\n  { label: 'MATLAB', value: 'matlab' },\n  { label: 'Mathematica', value: 'mathematica' },\n  { label: 'Mermaid', value: 'mermaid' },\n  { label: 'Nix', value: 'nix' },\n  { label: 'Notion Formula', value: 'notion' },\n  { label: 'Objective-C', value: 'objectivec' },\n  { label: 'OCaml', value: 'ocaml' },\n  { label: 'Pascal', value: 'pascal' },\n  { label: 'Perl', value: 'perl' },\n  { label: 'PHP', value: 'php' },\n  { label: 'PowerShell', value: 'powershell' },\n  { label: 'Prolog', value: 'prolog' },\n  { label: 'Protocol Buffers', value: 'protobuf' },\n  { label: 'PureScript', value: 'purescript' },\n  { label: 'Python', value: 'python' },\n  { label: 'R', value: 'r' },\n  { label: 'Racket', value: 'racket' },\n  { label: 'Reason', value: 'reasonml' },\n  { label: 'Ruby', value: 'ruby' },\n  { label: 'Rust', value: 'rust' },\n  { label: 'Sass', value: 'scss' },\n  { label: 'Scala', value: 'scala' },\n  { label: 'Scheme', value: 'scheme' },\n  { label: 'SCSS', value: 'scss' },\n  { label: 'Shell', value: 'shell' },\n  { label: 'Smalltalk', value: 'smalltalk' },\n  { label: 'Solidity', value: 'solidity' },\n  { label: 'SQL', value: 'sql' },\n  { label: 'Swift', value: 'swift' },\n  { label: 'TOML', value: 'toml' },\n  { label: 'TypeScript', value: 'typescript' },\n  { label: 'VB.Net', value: 'vbnet' },\n  { label: 'Verilog', value: 'verilog' },\n  { label: 'VHDL', value: 'vhdl' },\n  { label: 'Visual Basic', value: 'vbnet' },\n  { label: 'WebAssembly', value: 'wasm' },\n  { label: 'XML', value: 'xml' },\n  { label: 'YAML', value: 'yaml' },\n];\n\nexport function CodeBlockCombobox() {\n  const [open, setOpen] = useState(false);\n  const readOnly = useReadOnly();\n  const editor = useEditorRef();\n  const element = useElement<TCodeBlockElement>();\n  const value = element.lang || 'plaintext';\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const items = React.useMemo(\n    () =>\n      languages.filter(\n        (language) =>\n          !searchValue ||\n          language.label.toLowerCase().includes(searchValue.toLowerCase())\n      ),\n    [searchValue]\n  );\n\n  if (readOnly) return null;\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          size=\"xs\"\n          variant=\"ghost\"\n          className=\"h-6 justify-between gap-1 px-2 text-xs text-muted-foreground select-none\"\n          aria-expanded={open}\n          role=\"combobox\"\n        >\n          {languages.find((language) => language.value === value)?.label ??\n            'Plain Text'}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent\n        className=\"w-[200px] p-0\"\n        onCloseAutoFocus={() => setSearchValue('')}\n      >\n        <Command shouldFilter={false}>\n          <CommandInput\n            className=\"h-9\"\n            value={searchValue}\n            onValueChange={(value) => setSearchValue(value)}\n            placeholder=\"Search language...\"\n          />\n          <CommandEmpty>No language found.</CommandEmpty>\n\n          <CommandList className=\"h-[344px] overflow-y-auto\">\n            <CommandGroup>\n              {items.map((language) => (\n                <CommandItem\n                  key={language.label}\n                  className=\"cursor-pointer\"\n                  value={language.value}\n                  onSelect={(value) => {\n                    editor.tf.setNodes<TCodeBlockElement>(\n                      { lang: value },\n                      { at: element }\n                    );\n                    setSearchValue(value);\n                    setOpen(false);\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      value === language.value ? 'opacity-100' : 'opacity-0'\n                    )}\n                  />\n                  {language.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/code-block-combobox.tsx"
    }
  ],
  "name": "code-block-element",
  "registryDependencies": [
    "command"
  ],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}