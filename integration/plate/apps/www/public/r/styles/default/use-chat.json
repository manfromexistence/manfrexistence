{
  "dependencies": [
    "ai",
    "@faker-js/faker"
  ],
  "files": [
    {
      "path": "components/editor/use-chat.ts",
      "content": "'use client';\n\nimport { useChat as useBaseChat } from '@ai-sdk/react';\nimport { faker } from '@faker-js/faker';\n\nimport { useSettings } from '@/components/editor/settings';\n\nexport const useChat = () => {\n  const { keys, model } = useSettings();\n\n  return useBaseChat({\n    id: 'editor',\n    api: '/api/ai/command',\n    body: {\n      // !!! DEMO ONLY: don't use API keys client-side\n      apiKey: keys.openai,\n      model: model.value,\n    },\n    // Mock the API response. Remove it when you implement the route /api/ai/command\n    fetch: async (input, init) => {\n      const res = await fetch(input, init);\n\n      if (!res.ok) {\n        let isMarkdown = false;\n\n        try {\n          isMarkdown = JSON.parse(init?.body as string)\n            .messages.at(-1)\n            .content.includes('Generate a markdown sample');\n        } catch {\n          isMarkdown = false;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 400));\n\n        const stream = fakeStreamText({ isMarkdown });\n\n        return new Response(stream, {\n          headers: {\n            Connection: 'keep-alive',\n            'Content-Type': 'text/plain',\n          },\n        });\n      }\n\n      return res;\n    },\n  });\n};\n\n// Used for testing. Remove it after implementing useChat api.\nconst fakeStreamText = ({\n  chunkCount = 10,\n  isMarkdown = false,\n  streamProtocol = 'data',\n}: {\n  chunkCount?: number;\n  isMarkdown?: boolean;\n  streamProtocol?: 'data' | 'text';\n} = {}) => {\n  // Create 3 blocks with different lengths\n  const blocks = isMarkdown\n    ? markdownChunks\n    : [\n        Array.from({ length: chunkCount }, () => ({\n          delay: faker.number.int({ max: 100, min: 30 }),\n          texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n        })),\n        Array.from({ length: chunkCount + 2 }, () => ({\n          delay: faker.number.int({ max: 100, min: 30 }),\n          texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n        })),\n        Array.from({ length: chunkCount + 4 }, () => ({\n          delay: faker.number.int({ max: 100, min: 30 }),\n          texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n        })),\n      ];\n\n  const encoder = new TextEncoder();\n\n  return new ReadableStream({\n    async start(controller) {\n      for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n\n        // Stream the block content\n        for (const chunk of block) {\n          await new Promise((resolve) => setTimeout(resolve, chunk.delay));\n\n          if (streamProtocol === 'text') {\n            controller.enqueue(encoder.encode(chunk.texts));\n          } else {\n            controller.enqueue(\n              encoder.encode(`0:${JSON.stringify(chunk.texts)}\\n`)\n            );\n          }\n        }\n\n        // Add double newline after each block except the last one\n        if (i < blocks.length - 1) {\n          if (streamProtocol === 'text') {\n            controller.enqueue(encoder.encode('\\n\\n'));\n          } else {\n            controller.enqueue(encoder.encode(`0:${JSON.stringify('\\n\\n')}\\n`));\n          }\n        }\n      }\n\n      if (streamProtocol === 'data') {\n        controller.enqueue(\n          `d:{\"finishReason\":\"stop\",\"usage\":{\"promptTokens\":0,\"completionTokens\":${blocks.reduce(\n            (sum, block) => sum + block.length,\n            0\n          )}}}\\n`\n        );\n      }\n\n      controller.close();\n    },\n  });\n};\n\nconst markdownChunks = [\n  [\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Make text ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '**bold**' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ', ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '*italic*' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ', ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '__underlined__' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ', or apply a ' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: '***combination***',\n    },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'of ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'these ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'styles ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'for ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'a ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'visually ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'striking ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'effect.' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Add ' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: '~~strikethrough~~',\n    },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'to ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'indicate ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'deleted ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'or ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'outdated ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'content.' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Write ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'code ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'snippets ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'with ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'inline ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '`code`' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' formatting ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'for ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'easy ' },\n    { delay: faker.number.int({ max: 100, min: 30 }), texts: 'readability.' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Add ' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: '[links](https://example.com)',\n    },\n    { delay: faker.number.int({ max: 100, min: 30 }), texts: ' to ' },\n    { delay: faker.number.int({ max: 100, min: 30 }), texts: 'external ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'resources ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'or ' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: 'references.\\n\\n',\n    },\n\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Use ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'inline ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'math ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'equations ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'like ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '$E = mc^2$ ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'for ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'scientific ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'notation.' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n\\n' },\n\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '# ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Heading ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '## ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Heading ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '### ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Heading ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '3\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '> ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Blockquote\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '- ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Unordered ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '- ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Unordered ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1. ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Ordered ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2. ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Ordered ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '- ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '[ ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '] ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Task ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '- ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '[x] ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Task ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'list ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'item ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '![Alt ' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts:\n        'text](https://images.unsplash.com/photo-1712688930249-98e1963af7bd?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)\\n\\n',\n    },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: '### Advantage blocks:\\n',\n    },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '$$\\n' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: 'a^2 + b^2 = c^2\\n',\n    },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '$$\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '```python\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '# ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Code ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'block\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'print(\"Hello, ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'World!\")\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '```\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Horizontal ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'rule\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '---\\n\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '| ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Header ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1 ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '| ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Header ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2 ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '|\\n' },\n    {\n      delay: faker.number.int({ max: 20, min: 5 }),\n      texts: '|----------|----------|\\n',\n    },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '| ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Row ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '1   ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' | ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Data    ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' |\\n' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '| ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Row ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: '2   ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' | ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: 'Data    ' },\n    { delay: faker.number.int({ max: 20, min: 5 }), texts: ' |' },\n  ],\n];\n",
      "type": "registry:component",
      "target": "components/editor/use-chat.ts"
    }
  ],
  "name": "use-chat",
  "registryDependencies": [],
  "type": "registry:component",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}